# COMMENTED OUT FOR VERCEL/SUPABASE MIGRATION - Original GCP Terraform Staging Deployment

# This GitHub Actions workflow was used to deploy to Google Cloud Platform staging environment
# It has been commented out as part of the migration to Vercel/Supabase

# name: Terraform Deploy - Staging

# on:
#   push:
#     branches: [main]
#     paths:
#       - 'infrastructure/terraform/**'
#       - '.github/workflows/terraform-staging.yml'
#   pull_request:
#     branches: [main]
#     paths:
#       - 'infrastructure/terraform/**'

# env:
#   TERRAFORM_VERSION: 1.7.0
#   WORKING_DIRECTORY: infrastructure/terraform/environments/staging

# jobs:
#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       id-token: write
#       pull-requests: write
#     
#     defaults:
#       run:
#         working-directory: ${{ env.WORKING_DIRECTORY }}
#     
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#       
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ${{ env.TERRAFORM_VERSION }}
#       
#       - name: Authenticate to Google Cloud
#         uses: google-github-actions/auth@v2
#         with:
#           workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
#           service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
#       
#       - name: Setup Google Cloud SDK
#         uses: google-github-actions/setup-gcloud@v2
#       
#       - name: Terraform Format Check
#         id: fmt
#         run: terraform fmt -check -recursive
#         continue-on-error: true
#       
#       - name: Terraform Init
#         id: init
#         run: terraform init
#       
#       - name: Terraform Validate
#         id: validate
#         run: terraform validate -no-color
#       
#       - name: Terraform Plan
#         id: plan
#         if: github.event_name == 'pull_request'
#         run: terraform plan -no-color -input=false
#         continue-on-error: true
#       
#       - name: Update Pull Request
#         uses: actions/github-script@v7
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: ${{ steps.plan.outputs.stdout }}
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#             
#             <details><summary>Show Plan</summary>
#             
#             \`\`\`terraform\n
#             ${process.env.PLAN}
#             \`\`\`
#             
#             </details>
#             
#             *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#             
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })
#       
#       - name: Terraform Plan Status
#         if: steps.plan.outcome == 'failure'
#         run: exit 1
#       
#       - name: Terraform Apply
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform apply -auto-approve -input=false